// import global rules
@use "./sass/layouts/golbal-rules";
// import contact page
@use "./sass/pages/_contact";
// Import Variables
@use "./sass/variables/colors" as *;
// import media queries
@use "./sass/variables/media" as *;
// import mixins
@use "./sass/helpers/mixins" as *;
// import centering
@use "./sass/helpers/centering" as *;


// Global Variable
$alt_color: green;

.header {
  color: $alt_color;
}
.footer {
  $alt_color: black !global;
  background-color: $alt_color;
}
.copyright {
  background-color: $alt_color;
}
.sidebar {
  background-color: $main;
  color: $alt;
}
// Nesting & Parent Element

.parent {
  font-weight: bold;
  .child {
    font-size: 20px;
    .grand-child {
      font-size: 15px;
    }
  }
}

.parent-one,
.parent-two {
  padding: 20px;
  .child {
    padding: 10px;
  }
}

.parent > {
  .child {
    font-size: 20px;
  }
  .test {
    font-weight: bold;
  }
}

.parent {
  > .child {
    font-size: 20px;
  }
  .test {
    font-weight: bold;
  }
  + p {
    font-size: 15px;
  }
}

.parent {
  > {
    .element-one {
      font-size: 10px;
    }
    .element-two {
      font-size: 10px;
    }
  }
  .not-direct-child {
    font-weight: bold;
  }
}

.box {
  .title {
    font-size: 10px;
  }
  .description {
    font-size: 8px;
  }
  // & means the parent element class="box red"
  &.red {
    color: red;
  }
  &.green {
    color: green;
  }
  &:hover {
    background-color: #eee;
  }
  &:hover .title {
    font-weight: bold;
  }
  :not(&) {
    font-weight: normal;
  }
  [dir="rtl"] & {
    direction: rtl;
  }
}

// media queries
@media ($max_mobile) {
  .sidebar {
    padding: 40px;
  }
}

// Property Declarations And Placeholder

.box {
  font-size: 20px;
  font: {
    size: 15px;
    weight: bold;
  }
  padding: 10px;
  margin: auto {
    top: 10px;
    bottom: 15px;
  }
}

// % to make group of rules and thier is no thing called main-box
%main-box {
  background-color: white;
  padding: 15px;
  border: 1px solid #ccc;
}

.ads {
  @extend %main-box;
  font-size: 20px;
  color: red;
}

.article {
  font-size: 22px;
  @extend %main-box;
  color: green;
}

// Control Flow => If And Else

$theme: "dark";

.page {
  @if $theme == "light" {
    background-color: white;
    color: #444;
  } @else {
    background-color: #444;
    color: white;
  }
}

$rounded: false;

.box {
  @extend %main-box;
  border-radius: if($rounded, 6px, null);
}

// arrow div app
$direction: "right";

.arrow-div {
  @extend %main-box;
  width: 100px;
  height: 100px;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 20px;
  margin: 20px auto;
  &::before {
    content: "";
    position: absolute;
    border: 10px solid transparent;
    @if $direction == "top" {
      top: -20px;
      left: 50%;
      transform: translateX(-50%);
      -webkit-transform: translateX(-50%);
      -moz-transform: translateX(-50%);
      -ms-transform: translateX(-50%);
      -o-transform: translateX(-50%);
      border-bottom-color: #444;
    } @else if $direction == "bottom" {
      bottom: -20px;
      left: 50%;
      transform: translateX(-50%);
      -webkit-transform: translateX(-50%);
      -moz-transform: translateX(-50%);
      -ms-transform: translateX(-50%);
      -o-transform: translateX(-50%);
      border-top-color: #444;
    } @else if $direction == "left" {
      left: -20px;
      top: 50%;
      transform: translateY(-50%);
      -webkit-transform: translateY(-50%);
      -moz-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
      -o-transform: translateY(-50%);
      border-right-color: #444;
    } @else if $direction == "right" {
      right: -20px;
      top: 50%;
      transform: translateY(-50%);
      -webkit-transform: translateY(-50%);
      -moz-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
      -o-transform: translateY(-50%);
      border-left-color: #444;
    } @else {
      @error "this direction is not valid";
    }
  }
}

// interpolation
$company: "facebook";
$position: "top";

// unique-id function to generate random id
.ad-#{$company}-#{unique-id()} {
  background-image: url("images/#{$company}.png");
  #{$position}: 0;
}

.ad-#{unique-id()} {
  background-image: url("images/#{$company}.png");
  #{$position}: 0;
}

// Comments

// This is a comment not appear in css

/* This is a comment appear in css but not in compressed mode*/

/*! this is a comment appear in css and in compressed mode */

/* this comment contain interpplation => #{$company} */

/// this comment not appear in css and not in compressed mode this is a documintation comment.

// mixins
ul.links {
  @include list-reset;
}

// mixins with arguments that i can pass it
// it's like a function
.box {
  @include box(100px, 100px, red);
}
.box {
  @include centering;
  @include box(100px, 100px, red);
}

// loop => for

@for $i from 1 through 5 {
  .class-#{$i} {
    width: 100px + $i;
  }
}

// more advanced example

$dimentions: 0;
@for $i from 1 through 5 {
  .circle-#{$i + $dimentions} {
    width:  $dimentions + 100;
    height: $dimentions + 100;
    border-radius: 50%;
    background-color: rgb(0, 0, 0, 0.1 * $i);
  }
  $dimentions: $dimentions + 100;
}

// each + maps

$colors: (
  "red": red,
  "green": green,
  "blue": blue,
  "yellow": yellow,
  "black": black,
  "white": white,
);

@each $name, $color in $colors {
  .#{$name} {
    color: white;
    background-color: $color;
    &::before {
      content: $name;
    }
  }
}

$clases: "one" 20px red, "two" 10px green, "three" 30px blue;

@each $name, $size, $color in $clases {
  .#{$name} {
    font-size: $size;
    color: white;
    background-color: $color;
    padding: $size / 2;
    &::before {
      content: $name;
    }
  }
}

// while loop

